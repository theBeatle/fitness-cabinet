// <auto-generated />
using System;
using FitnessApp.Models.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190506155413_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessApp.Models.DB.Achivement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("Quantity");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Achivement");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Latitude")
                        .IsRequired();

                    b.Property<string>("Logtitude")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Chat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ReceiverId");

                    b.Property<string>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Coach", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int>("Height");

                    b.Property<string>("PersonId");

                    b.Property<int>("Weight");

                    b.Property<string>("WorkShedule")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.CoachPlace", b =>
                {
                    b.Property<string>("PlaceId");

                    b.Property<string>("CoachId");

                    b.Property<string>("Id");

                    b.HasKey("PlaceId", "CoachId");

                    b.HasIndex("Id");

                    b.ToTable("CoachPlace");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Person", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("FacebookId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SexStatusId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SexStatusId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.PersonPhoto", b =>
                {
                    b.Property<string>("PersonId");

                    b.Property<string>("PhotoId");

                    b.Property<string>("Id");

                    b.HasKey("PersonId", "PhotoId");

                    b.HasIndex("Id");

                    b.ToTable("PersonPhoto");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Photo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Place", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsSimplePlace");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhotoId");

                    b.Property<int>("Rating");

                    b.Property<string>("Track")
                        .HasMaxLength(500);

                    b.Property<string>("WorkShedule")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.PlacePhoto", b =>
                {
                    b.Property<string>("PlaceId");

                    b.Property<string>("PhotoId");

                    b.Property<string>("Id");

                    b.HasKey("PlaceId", "PhotoId");

                    b.HasIndex("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("PlacePhoto");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Progress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("TraineeId");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("TraineeId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.RealService", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoachId");

                    b.Property<string>("CreationTime")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("PlaceId");

                    b.Property<int>("Price");

                    b.Property<string>("ServiceId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("TraineeId");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TraineeId");

                    b.ToTable("RealService");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Receiver", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("Frequency");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("RealServiceId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("RealServiceId");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Sender", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Sender");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Service", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("TrainingName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.SexStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SexStatus");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Speciality", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoachId");

                    b.Property<string>("Experience")
                        .IsRequired();

                    b.Property<int>("Rating");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Trainee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int>("Height");

                    b.Property<string>("PersonId");

                    b.Property<int>("Weight");

                    b.Property<string>("WorkShedule")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Trainee");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.TraineeAchivement", b =>
                {
                    b.Property<string>("TraineeId");

                    b.Property<int>("AchivementId");

                    b.Property<string>("Id");

                    b.HasKey("TraineeId", "AchivementId");

                    b.HasIndex("Id");

                    b.ToTable("TraineeAchivements");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Usabilities", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("PlaceId");

                    b.Property<int>("Quantity");

                    b.Property<string>("UsabilityName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Usabilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Chat", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Receiver", "Receiver")
                        .WithMany("Chat")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("FitnessApp.Models.DB.Sender", "Sender")
                        .WithMany("Chat")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Coach", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person", "Person")
                        .WithMany("Coach")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.CoachPlace", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Coach", "Coach")
                        .WithMany("CoachPlaces")
                        .HasForeignKey("Id");

                    b.HasOne("FitnessApp.Models.DB.Place", "Place")
                        .WithMany("CoachPlaces")
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Person", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.SexStatus", "SexStatus")
                        .WithMany("Person")
                        .HasForeignKey("SexStatusId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.PersonPhoto", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person", "Person")
                        .WithMany("PersonPhotos")
                        .HasForeignKey("Id");

                    b.HasOne("FitnessApp.Models.DB.Photo", "Photo")
                        .WithMany("PersonPhotos")
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Place", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Address", "Address")
                        .WithMany("Place")
                        .HasForeignKey("AddressId");

                    b.HasOne("FitnessApp.Models.DB.Photo")
                        .WithMany("Places")
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.PlacePhoto", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Place", "Place")
                        .WithMany("PlacePhotos")
                        .HasForeignKey("Id");

                    b.HasOne("FitnessApp.Models.DB.Photo", "Photo")
                        .WithMany("PlacePhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Progress", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Trainee", "Trainee")
                        .WithMany("Progress")
                        .HasForeignKey("TraineeId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.RealService", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Coach", "Coach")
                        .WithMany("RealService")
                        .HasForeignKey("CoachId");

                    b.HasOne("FitnessApp.Models.DB.Place", "Place")
                        .WithMany("RealService")
                        .HasForeignKey("PlaceId");

                    b.HasOne("FitnessApp.Models.DB.Service", "Service")
                        .WithMany("RealService")
                        .HasForeignKey("ServiceId");

                    b.HasOne("FitnessApp.Models.DB.Trainee", "Trainee")
                        .WithMany("RealService")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Receiver", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person", "Person")
                        .WithMany("Receiver")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Reminder", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.RealService", "RealService")
                        .WithMany("Reminder")
                        .HasForeignKey("RealServiceId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Sender", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person", "Person")
                        .WithMany("Sender")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Speciality", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Coach", "Coach")
                        .WithMany("Speciality")
                        .HasForeignKey("CoachId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Trainee", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person", "Person")
                        .WithMany("Trainee")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.TraineeAchivement", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Achivement", "Achivement")
                        .WithMany("TraineeAchivements")
                        .HasForeignKey("Id");

                    b.HasOne("FitnessApp.Models.DB.Trainee", "Trainee")
                        .WithMany("TraineeAchivements")
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("FitnessApp.Models.DB.Usabilities", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Place", "Place")
                        .WithMany("Usabilities")
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessApp.Models.DB.Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessApp.Models.DB.Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
